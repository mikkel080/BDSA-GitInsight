@page "/"
<PageTitle>GitInsight</PageTitle>

@using GitInsight.Blazor.Data
@using Microsoft.AspNetCore.Components

@using System.Text.Json
@using System.Text.Json.Serialization
@using Radzen

<RadzenText TextStyle="TextStyle.H5">Welcome to GitInsight!</RadzenText>

<div class="container-fluid justify-items-center">
       <div class="row px-3 align-items-center justify-items-center">
            <p class="p3">Please input the GitHub Repository that you want to check</p>
            <div class="col-6 p-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">GitHub user/organisation</RadzenText>
                <RadzenTextBox Placeholder="GitHub user/organisation" @bind-Value=@org Class="w-100" />
            </div>
        </div>
        <div class="row px-3 align-items-end justify-items-center">
            <div class="col-6 p-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Repository name</RadzenText>
                <RadzenTextBox Placeholder="Repository name" @bind-Value=@proj Class="w-100" />
            </div>
        </div>
        <div class="row p-3 justify-items-end align-items-center">
                 <RadzenButton Click=@fetchAnalysis Text="Get Anlysis" ButtonStyle="ButtonStyle.Primary" />
        </div>
    <div class="container">
        <div class="row ">
            <div class="col-6 my-2">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Visible="@isFetchSuccesful">Choose which chart or results you want to see</RadzenText>
                <RadzenSelectBar @bind-Value=@ValueForCharts TValue="int" Visible="@isFetchSuccesful">
                    <Items>
                        <RadzenSelectBarItem Text="Pie chart for commits" Value="1" />
                        <RadzenSelectBarItem Text="Bar chart for Author" Value="2" />
                        <RadzenSelectBarItem Text="Fork results" Value="3" />
                    </Items>
                </RadzenSelectBar>
            </div>
        </div>
    </div>

    <!--Charts and Results-->
    <div class="container">
                @if (isFetchSuccesful && ValueForCharts ==1 && poco is not null)
                {
                    var dataCommit = new List<DataItem>();
                    foreach (var item in poco.FrequencyResult.Data)
                    {
                        dataCommit.Add(new DataItem(item.Date.ToShortDateString(), item.Count));
                }
                <p>Chart from @poco!.RepositoryIdentifier.Organization / @poco!.RepositoryIdentifier.Repository</p>
                <RadzenChart>
                    <RadzenDonutSeries Data="@dataCommit" CategoryProperty="Value" ValueProperty="Count">
                        <RadzenSeriesDataLabels Visible="@true" />
                    </RadzenDonutSeries>
                </RadzenChart>
                }
            @if (isFetchSuccesful && ValueForCharts==2)
                {
                <RadzenChart>
                    @foreach (var item in poco!.AuthorResult.Data)
                    {
                        var data = new List<DataItem>();
                        foreach (var item2 in item.FrequencyResults.Data)
                            {
                                data.Add(new DataItem(item2.Date.ToShortDateString(), item2.Count));
                            }
                        var name = item.AuthorName;
                      <RadzenColumnSeries Data="@data" CategoryProperty="Value" Title="@name" LineType="LineType.Dashed" ValueProperty="Count">
                        <RadzenSeriesDataLabels Visible="@true" />
                    </RadzenColumnSeries>  
                    }
                </RadzenChart>
                }
            @if (isFetchSuccesful && ValueForCharts==3)
                {
                    <RadzenText>Forks</RadzenText>
                    @foreach (var item in poco!.ForkResult.RepositoryIdentifiers)
                    {
                        <RadzenText>- @item.Organization / @item.Repository </RadzenText>
                    }
                   
                }
        </div>
</div>
@code{
    /*Notes to charts and results:
    Make cards with each users frequency results chart for author results
    Overview over forks
    Tendency charts 
    bar and point charts for frequency results*/
[Parameter]
        public string org { get; set; } = "";

        [Parameter]
        public string proj { get; set; } = "";
        [Inject]
        IHttpClientFactory? ClientFactory { get; set; }
        private int ValueForCharts {get; set;}
        private bool isFetchSuccesful { get; set; }
        private Rootobject? poco;
        class DataItem
        {
            public string Value { get; set; }
            public int Count { get; set; }
            public DataItem(string value, int count)
            {
                Value = value;
                Count = count;
            }
        }
        private async Task fetchAnalysis()
        {
            isFetchSuccesful = false;
            if (org == "" || proj == "")
                return;

                var request = new HttpRequestMessage(HttpMethod.Get,
                $"https://localhost:7199/{org}/{proj}");
                /*request.Headers.Add("Accept", "application/vnd.github.v3+json");
                request.Headers.Add("User-Agent", "HttpClientFactory-Sample");*/

                var client = ClientFactory!.CreateClient();

                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    poco = await JsonSerializer.DeserializeAsync
                        <Rootobject>(responseStream);
                    isFetchSuccesful = true;
                }
                else
                {
                    isFetchSuccesful = false;
                }
            }

        }


