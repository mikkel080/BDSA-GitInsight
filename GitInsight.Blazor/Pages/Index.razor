@page "/"
<PageTitle>GitInsight</PageTitle>

@using GitInsight.Blazor.Data
@using Microsoft.AspNetCore.Components

@using System.Text.Json
@using System.Text.Json.Serialization
@using Radzen

<RadzenText TextStyle="TextStyle.H5">Welcome to GitInsight!</RadzenText>

<div class="container-fluid justify-items-center">
       <div class="row px-3 align-items-center justify-items-center">
            <p class="p3">Please input the GitHub Repository that you want to check</p>
            <div class="col-6 p-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">GitHub user/organisation</RadzenText>
                <RadzenTextBox Placeholder="GitHub user/organisation" @bind-Value=@org Class="w-100" />
            </div>
        </div>
        <div class="row px-3 align-items-end justify-items-center">
            <div class="col-6 p-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Repository name</RadzenText>
                <RadzenTextBox Placeholder="Repository name" @bind-Value=@proj Class="w-100" />
            </div>
        </div>
        <div class="row p-3 justify-items-end align-items-center">
                 <RadzenButton Click=@fetchAnalysis Text="Get Analysis" ButtonStyle="ButtonStyle.Primary" />
        </div>
    <div class="container">
        <div class="row ">
            <div class="col-6 my-2">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Visible="@isFetchSuccesful">Choose which chart or results you want to see</RadzenText>
                <RadzenSelectBar @bind-Value=@ValueForCharts TValue="int" Visible="@isFetchSuccesful">
                    <Items>
                        <RadzenSelectBarItem Text="Bar chart all commits" Value="1" />
                        <RadzenSelectBarItem Text="Bar chart Author's commits" Value="2" />
                        <RadzenSelectBarItem Text="Fork results" Value="3" />
                    </Items>
                </RadzenSelectBar>
            </div>
        </div>
    </div>

    <!--Charts and Results-->
    <div class="container">
                @if (isFetchSuccesful)
                {
                    <RadzenCheckBox @bind-Value="@author" Name="author2"></RadzenCheckBox>
                    <RadzenLabel Text="Show charts by author" For="author2" />
                    <RadzenCheckBox @bind-Value="@commitsAll" Name="commits2"></RadzenCheckBox>
                    <RadzenLabel Text="Show charts for all commits" For="commits2" />
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />

                    <p>Chart from @poco!.RepositoryIdentifier.Organization / @poco!.RepositoryIdentifier.Repository</p>
                }
                @if (isFetchSuccesful && ValueForCharts ==1 && poco is not null && dateFormat is not null && authorCommitResult is not null && frequencyCommitResult is not null)
                {
                    @if (commitsAll) 
                    {
                        <RadzenText>All commits</RadzenText>      
                        
                    <RadzenChart>
                        <RadzenLineSeries Data="@frequencyCommitResult" CategoryProperty="Value" Title="Commit" ValueProperty="Count">
                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Formatter="@FormatDate" />
                        <RadzenValueAxis Min="0" />
                    </RadzenChart>
                    }
                    
                    @if (author)
                    {
                        <RadzenText>Commits by Author</RadzenText>      
                    <div class="row">
                    @foreach (var item in authorCommitResult)
                    {
                        
                        <div class="col-lg-6 p-3">
                        <RadzenCard>
                            <RadzenText>@item.authorName</RadzenText>
                            <RadzenChart>
                                <RadzenLineSeries Data="@item.results" CategoryProperty="Value" Title="Commit" LineType="LineType.Dashed" ValueProperty="Count">
                                    <RadzenMarkers MarkerType="MarkerType.Square" />
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </RadzenLineSeries>
                                 <RadzenCategoryAxis Formatter="@FormatDate" />
                                 <RadzenValueAxis Min="0" />
                            </RadzenChart>
                        </RadzenCard> 
                        </div> 
                    }
                    </div>
                    }
                }
                @if (!author && !commitsAll)
                {
                    <RadzenText>Please select a chart</RadzenText>
                }
            @if (isFetchSuccesful && ValueForCharts==2 && poco is not null && dateFormat is not null && authorCommitResult is not null && frequencyCommitResult is not null)
                {
                    @if (commitsAll)
                    {
                        <RadzenText>All commits</RadzenText>      
                        <RadzenChart>
                            <RadzenColumnSeries Data="@frequencyCommitResult" CategoryProperty="Value" Title="Commit" ValueProperty="Count">
                                <RadzenSeriesDataLabels Visible="@true" />
                            </RadzenColumnSeries>
                            <RadzenCategoryAxis Formatter="@FormatDate" />
                            <RadzenValueAxis Min="0" />
                        </RadzenChart>
                    }
                    @if (author)
                    {
                        <RadzenText>Commits by Author</RadzenText>      
                        <div class="row">
                        @foreach (var item in authorCommitResult)
                        {
                            <div class="col-lg-6 p-3">
                                <RadzenCard>
                                    <RadzenText>@item.authorName</RadzenText>
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@item.results" CategoryProperty="Value" Title="Commit" LineType="LineType.Dashed" ValueProperty="Count">
                                            <RadzenMarkers MarkerType="MarkerType.Square" />
                                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                        </RadzenColumnSeries>
                                        <RadzenCategoryAxis Formatter="@FormatDate" />
                                        <RadzenValueAxis Min="0" />
                                    </RadzenChart>
                                </RadzenCard> 
                            </div> 
                        }
                    </div>
                    }
                }
            @if (isFetchSuccesful && ValueForCharts==3)
                {
                    <RadzenText>Forks</RadzenText>
                    @foreach (var item in poco!.ForkResult.RepositoryIdentifiers)
                    {
                        <RadzenText>- @item.Organization / @item.Repository </RadzenText>
                    }
                   
                }
        </div>
</div>
@code{
    /*Notes to charts and results:
    Make cards with each users frequency results chart for author results
    Overview over forks
    Tendency charts 
    bar and point charts for frequency results*/
[Parameter]
        public string org { get; set; } = "";

        [Parameter]
        public string proj { get; set; } = "";
        [Inject]
        IHttpClientFactory? ClientFactory { get; set; }
        private int ValueForCharts {get; set;}
        private bool isFetchSuccesful { get; set; }
        private Rootobject? poco;
        private bool showDataLabels = false;
        private string? dateFormat;
        private bool author = true;
        private bool commitsAll = true;
        private List<(string authorName, List<DataItem> results)>? authorCommitResult;
        private List<DataItem>? frequencyCommitResult;
        class DataItem
        {
            public string Value { get; set; }
            public int Count { get; set; }
            public DataItem(string value, int count)
            {
                Value = value;
                Count = count;
            }
        }
        private async Task fetchAnalysis()
        {
            isFetchSuccesful = false;
            if (org == "" || proj == "")
                return;

                var request = new HttpRequestMessage(HttpMethod.Get,
                $"https://localhost:7199/{org}/{proj}");
                /*request.Headers.Add("Accept", "application/vnd.github.v3+json");
                request.Headers.Add("User-Agent", "HttpClientFactory-Sample");*/

                var client = ClientFactory!.CreateClient();

                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    poco = await JsonSerializer.DeserializeAsync
                        <Rootobject>(responseStream);
                    isFetchSuccesful = true;
                    if (poco.FrequencyResult.Data.Select(c => c.Date.Month).Distinct().Count() > 2)
                    {
                        dateFormat = "m";
                    }
                    else if (poco.FrequencyResult.Data.Select(c => c.Date.Year).Distinct().Count() > 2)
                    {
                        dateFormat = "y";
                    }
                    else {dateFormat = "d";}
                    CalculateResults();
                }
                else
                {
                    isFetchSuccesful = false;
                }
            }

    string FormatDate(object value)
    {
        if (value != null)
        {
            if (dateFormat.Equals("m")) { return Convert.ToDateTime(value).ToString("MMM");}
            else if (dateFormat.Equals("y")) { return Convert.ToDateTime(value).ToString("y");}
            else { return Convert.ToDateTime(value).ToString("m");}
        }

        return string.Empty;
    }
    
    public void CalculateResults()
    {
        if (poco is not null)
        {
            var tmpData = new List<DataItem>();
            Datum[] tmp = new Datum[]{};
            if (dateFormat == "m")
            {
                tmp =  (from i in poco.FrequencyResult.Data
                    group i by i.Date.Month into grp
                    select new Datum{Date = new DateTime(2000, grp.Key, 1), Count = grp.Sum(i => i.Count)}).OrderBy(d => d.Date.Month).ToArray();
            }
            else if (dateFormat == "y")
            {
                tmp =  (from i in poco.FrequencyResult.Data
                            group i by i.Date.Year into grp
                            select new Datum{Date = new DateTime(grp.Key,1,1), Count = grp.Sum(i => i.Count)}).OrderBy(d => d.Date.Year).ToArray();
            }
            foreach (var item in tmp)
            {
                tmpData.Add(new DataItem(item.Date.ToShortDateString(), item.Count));
            }
            frequencyCommitResult = tmpData;

            //Calculate author results
            var tmpDataAuthor = new List<(string, List<DataItem>)>();
            foreach (var item in poco!.AuthorResult.Data)
            {
                Datum2[] tmpAuthor= new Datum2[]{};
                var data = new List<DataItem>();
                if (dateFormat == "m")
                {
                    tmpAuthor =  (from i in item.FrequencyResults.Data
                            group i by i.Date.Month into grp
                            select new Datum2{Date = new DateTime(2000, grp.Key, 1), Count = grp.Sum(i => i.Count)}).OrderBy(d => d.Date.Month).ToArray();
                }
                else if (dateFormat == "y")
                {
                    tmpAuthor =  (from i in item.FrequencyResults.Data
                            group i by i.Date.Year into grp
                            select new Datum2{Date = new DateTime(grp.Key,1,1), Count = grp.Sum(i => i.Count)}).OrderBy(d => d.Date.Year).ToArray();
                }
                foreach (var item2 in tmpAuthor)
                {
                    data.Add(new DataItem(item2.Date.ToShortDateString(), item2.Count));
                }
                tmpDataAuthor.Add((item.AuthorName, data));
                authorCommitResult = tmpDataAuthor;
        }
        
    }

    }
}


